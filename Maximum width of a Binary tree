/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root)return 0;
        queue<pair<TreeNode*,int>>q;
        q.push(make_pair(root,0));
        int width=0;
        while(!q.empty()){
            int min_index = q.front().second;
            int first,last;
            int size = q.size();
            for(int i=0;i<size;i++){
                int index = q.front().second - min_index;
                TreeNode*node = q.front().first;
                q.pop();
                if(i==0)first = index;
                if(i==size-1)last = index;
                if(node->left)q.push(make_pair(node->left,(long long)index*2+1));
                if(node->right)q.push(make_pair(node->right,(long long)index*2+2));
            }
            width = max(width,last-first+1);
        }
        return width;
    }
};
