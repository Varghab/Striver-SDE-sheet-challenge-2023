/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode*minValue(TreeNode*root){
        if(!root->left)return root;
        return minValue(root->left);
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root)return root;
        if(root->val==key){
            //0 child
            if(!root->left&&!root->right){
                delete root;
                return NULL;
            }
            //1 child
            else if(!root->left&&root->right){
                TreeNode*temp = root->right;
                delete root;
                return temp;
            }
            else if(root->left&&!root->right){
                TreeNode*temp = root->left;
                delete root;
                return temp;
            }
            //2 children
            else if(root->left&&root->right){
                int minV = minValue(root->right)->val;
                root->val = minV;
                root->right = deleteNode(root->right, minV);
                return root;
            }
        }
        if(key>root->val){
            root->right = deleteNode(root->right,key);
            return root;
        }
        else{
            root->left = deleteNode(root->left, key);
            return root;
        }


    }
};
