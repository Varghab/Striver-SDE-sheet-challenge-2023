/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void mark(TreeNode*root, map<TreeNode*,TreeNode*>&mp){
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            TreeNode*temp=q.front();
            q.pop();
            if(temp->left){
                mp[temp->left]=temp;
                q.push(temp->left);
            }
            if(temp->right){
                mp[temp->right]=temp;
                q.push(temp->right);
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        map<TreeNode*,TreeNode*>parent;
        mark(root,parent);
        int d=0;
        map<TreeNode*,bool>mp;
        mp[target]=true;
        queue<TreeNode*>q;
        q.push(target);
        while(!q.empty()){
            int size = q.size();
            if(d==k)break;
            for(int i=0;i<size;i++){
                TreeNode*temp = q.front();
                q.pop();
                if(parent[temp]&&!mp[parent[temp]]){
                    q.push(parent[temp]);
                    mp[parent[temp]]=true;
                }
                if(temp->left&&!mp[temp->left]){
                    q.push(temp->left);
                    mp[temp->left]=true;
                }
                if(temp->right&&!mp[temp->right]){
                    q.push(temp->right);
                    mp[temp->right]=true;
                }
            }
            d++;
        }
        vector<int>res;
        while(!q.empty()){
            TreeNode*temp=q.front();
            q.pop();
            res.push_back(temp->val);
        }
        return res;

    }
};
